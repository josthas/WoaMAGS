<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>AGS Tutorials</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="site.css" rel="stylesheet" type="text/css">
<meta name="Microsoft Border" content="t, default">
</head>

<body background="images/bg_main.gif" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p><img src="images/spacer.gif" width="10" height="3" alt="spacer graphic">
</p>
<table width="95%" border="0" align="center" cellpadding="0" cellspacing="1" bgcolor="000000" id="table1">
	<tr>
		<td class="edges">
		<img src="images/spacer.gif" width="10" height="3" alt="spacer graphic"></td>
	</tr>
	<tr>
		<td class="edges">
		<table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" id="table2">
			<tr>
				<td align="left">
				<img src="images/montage01.jpg" alt="Montage of games"></td>
				<td align="right">
				<img src="images/logo_AGS.jpg" width="329" height="42" alt="AGS Logo"></td>
			</tr>
		</table>
		</td>
	</tr>
	<tr>
		<td align="right" background="images/bg_nav.gif" class="white">
		Current Version: 3.1.2 SP1</td>
	</tr>
	<tr>
		<td class="edges">
		<img src="images/spacer.gif" width="10" height="3" alt="spacer graphic"></td>
	</tr>
</table>
<p style="margin-top: -5px; margin-bottom: 0">&nbsp;</p>

</td></tr><!--msnavigation--></table><!--msnavigation--><table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">
<table width="95%" border="0" align="center" cellpadding="0" cellspacing="0">
<tr>
<td width="175" valign="top">
<table width="100%" border="0" cellpadding="0" cellspacing="1" bgcolor="000000">
<tr> 
<td class="edges"><img src="images/spacer.gif" width="10" height="3" alt="spacer graphic"></td>
</tr>
<tr> 
<td align="center" bgcolor="f6f6f6" class="titles">Menu</td>
</tr>
<tr> 
<td bgcolor="ffffff" class="sidetext"><table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr> 
<td align="left" class="sideout">
<img src="images/nav_dot.gif" width="8" height="8" hspace="3" alt="spacer graphic"> 
<strong>Home</strong></td>
</tr>
<tr> 
<td align="left" class="sideout"><table width="95%" border="0" align="right" cellpadding="0" cellspacing="0">
<tr> 
<td class="sublinkout">&#8226; <a href="ac.shtml">About</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="acnews.htm">News</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="acfeat.htm">Features</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="acdload.htm">Download AGS</a></td>
</tr>
</table></td>
</tr>
<tr>
<td align="left" class="sideout"><img src="images/nav_dot.gif" width="8" height="8" hspace="3" alt="spacer graphic"> 
<strong>Games</strong><span class="maintext"><strong>&nbsp;</strong></span></td>
</tr>
<tr> 
<td align="left" class="sideout"><table width="95%" border="0" align="right" cellpadding="0" cellspacing="0">
<tr> 
<td class="sublinkout">&#8226; <a href="games.php">Games main page</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="games.php?category=102">Award Winners</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="games.php?action=pickofmonthhistory">
Picks of the month</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="games.php?category=0">Short games</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="games.php?category=6">Medium length 
games</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="games.php?category=1">Full length games</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; 
<a href="http://www.bigbluecup.com/yabb/index.php?board=8">In Production</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; 
<a href="http://www.bigbluecup.com/yabb/index.php?board=7">Hints &amp; Tips</a></td>
</tr>
</table></td>
</tr>
<tr> 
<td align="left" class="sideout"><img src="images/nav_dot.gif" width="8" height="8" hspace="3"> 
<strong>Community</strong><span class="maintext"><strong></strong></span></td>
</tr>
<tr> 
<td align="left" class="sideout"><table width="95%" border="0" align="right" cellpadding="0" cellspacing="0">
<tr> 
<td class="sublinkout">&#8226; <a href="forums.shtml">Forums</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="worldmap.php">AGSers World Map</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="memberwebs.php">Member websites</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="acirc.htm">Chat</a></td>
</tr>
</table></td>
</tr>
<tr> 

<td align="left" class="sideout"><img src="images/nav_dot.gif" width="8" height="8" hspace="3"> 
<strong>Resources</strong></td>
</tr>
<tr>
<td align="left" class="sideout"><table width="95%" border="0" align="right" cellpadding="0" cellspacing="0">
<tr> 
<td class="sublinkout">&#8226; <a href="acres.shtml">Tutorials</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="acfaq.htm">FAQ</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="ackb.shtml">Knowledge Base</a></td>
</tr>
<tr> 
<td class="sublinkout">&#8226; <a href="acres.shtml">Downloads</a></td>
</tr>
</table></td>
</tr>
<tr> 
<td align="left" class="sideout"><img src="images/nav_dot.gif" width="8" height="8" hspace="3"> 
<strong>Links</strong></td>
<tr>
<td align="left" class="sideout"><table width="95%" border="0" align="right" cellpadding="0" cellspacing="0">
<tr> 
<td class="sublinkout">&#8226; <a href="aclinks.htm">AGS-related links</a></td>
</tr>
</table></td>

</tr>
</table></td>
</tr>
<tr> 
<td class="edges"><img src="images/spacer.gif" width="10" height="2"></td>
</tr>
</table>
<img src="images/spacer.gif" width="25%" height="10"></td>
<td width="10"><img src="images/spacer.gif" width="10" height="10"></td>
<td valign="top"><table width="100%" border="0" cellpadding="0" cellspacing="1" bgcolor="000000">
<tr> 
<td class="edges"><img src="images/spacer.gif" width="10" height="3"></td>
</tr>
<tr> 
<td class="titles" align="center" bgcolor="F6F6F6">
<p>
Resources &gt; Tutorials</td>
</tr>
<tr> 
<td bgcolor="FFFFFF"><table border="0" cellspacing="0" cellpadding="8">
<tr> 
<td class="maintext">
      <h2 align="center"><b>Scripting Tutorial</b></h2>
      <p dir="ltr">In AGS, all the interactivity in the game is handled using 
		scripts. They're an essential part of game-making, so it's important 
		that we go through how to use them.</p>
      <h3><b><br>
      The Basics</b>
      </h3>
      <p>Right, we'll start off by doing something very simple - displaying a 
		message to the player when they click the Look icon on a hotspot. 
		Assuming that you've done the main AGS Tutorial, you should already have 
		created a script that looks like this:</p>
      <table border="0" id="table3">
        <tr>
          <td bgcolor="#99CCFF">
            <div dir="ltr">
            <pre>function hDoor_Look() 
{
  Display(&quot;It's quite a large, ominous looking door.&quot;);    
}     
</pre></div>
          </td>
        </tr>
      </table>
      <p dir="ltr">Let's look at this in detail. &quot;<i>function</i>&quot; tells AGS 
		that this is a block of script code that will run when an event occurs. 
		&quot;<i>hDoor_Look</i>&quot; is the name of that event. The empty parentheses <i>
		( )</i> tell AGS that this function takes no parameters (we'll come to 
		them later). Finally, the curly brackets <i>{</i> and <i>}</i> define 
		where this block of code starts and ends. Anything that you put between 
		the { and the } will be run when this event is triggered.</p>
		<p dir="ltr"><i>Display</i> is the name of the built-in command that 
		we're going to run. Then, in parenthesis we put the <i>parameters</i> to 
		that command. Parameters are extra pieces of information that the 
		command needs to run -- in this case, it needs the message that we want 
		to display.</p>
		<p dir="ltr">Finally, we end the line with a semicolon. You use 
		semicolons to tell AGS that it's the end of the command. Anything that 
		you put after the semicolon becomes a separate command, and you'll 
		usually do this on a new line.</p>
		<p>It's important to mention here that lines beginning with a 
		double-slash <code>//</code> are <b>comments</b> - AGS will
      ignore them, they are just there to help you remember what your script is
      doing. You can add comments to your script simply by starting the line
      with the <code>//</code> symbol.
      </p>
      <h3 align="left"><b><br>
      Commands Explained</b>
      </h3>
      <p dir="ltr">Each different command you can use in the script is also called a <b>function</b>.
      All the available commands are listed in the Scripting part of the manual, which also tells you how to use them.
      </p>
      <p dir="ltr">We want to display a message to the player, so we used the <i>Display</i>
      function. Looking this up in the manual gives us the definition:
      </p>
      <table border="0" id="table4">
        <tr>
          <td bgcolor="#FFCCCC">
            <pre>Display (string message, ...)
  Displays a message to the screen. It will be displayed in  
  the standard message box, and centred in the middle of
  the screen. <i>(description continues...)</i></pre>
          </td>
        </tr>
      </table>
      <p>The key point here is the part of the first line inside the brackets.
      This is called the <b>parameter list</b> and defines what parameters you
      give to the function.&nbsp; A parameter is some information that the
      function uses to decide what to do.<br>
      Each parameter is listed, separated by commas. They can be one of the
      following:
      <ul>
        <li>string <i>name<br>
          </i>This parameter is a string, ie. a piece of text. This means that
          for this parameter you supply text, surrounded by double-quotes. For
          example,&nbsp; <code>&quot;My text&quot;</code> .<br>
          <i>name</i> is the name by which the parameter is referred to in the
          function description, it is not relevant for writing your script.</li>
        <li>int <i>name</i><br>
          This parameter is an integer, ie. a numerical value. This means that
          for this parameter you supply a number, for example&nbsp; <code>65</code>&nbsp;
          .</li>
        <li>CHARID<br>
          This parameter is a character script name. You need to supply the
          script name of one of the game characters.</li>
		<li>InventoryItem*<br>
		This parameter is an inventory item. You need to supply the inventory 
		item you want to use.</li>
        <li>...<br>
          This parameter is optional, and can be of any type. You do not have to
          supply it at all, but if you do the function description will tell you
          what type of value to use.</li>
      </ul>
      <p>So, we know that our Display function needs a string and an optional
      parameter. The description goes on to explain that the optional
      parameter is used for advanced things like displaying variable values, so
      we can ignore it for now.</p>
      <p>To make our script call the function we write its name, then the
      parameters inside brackets, and finally a semicolon. This is very
      important, as without the semicolon the script won't compile. Also, note
      that we DO NOT write the parameter type (eg. &quot;string&quot; or
      &quot;int&quot;). So, we can
      add this line to our script:</p>
      <table border="0" id="table5">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>Display(&quot;It's quite a large, ominous looking door.&quot;);   </pre>
          </td>
        </tr>
      </table>
      <p>This is what we already did in the main tutorial, but having examined 
		it in more detail it should now make more sense why we've done it this 
		way.</p>
      <h3><br>
		Instances</h3>
      <p dir="ltr">The AGS script language is object-based. What this means is that 
		many commands are operated <b>on</b> something in the game. You should 
		not confuse <i>object-based</i> with room <i>objects</i>, they are 
		entirely different things. There is a script <b>instance</b> for each character in 
		the game, each object in the room, each hotspot, and so on.</p>
		<p>The name by which you access an instance in the script is given in 
		the editor as the item's <i>Script Name</i>. For example, assuming our 
		main character's script name is cEgo, then his instance name will be&nbsp;
		<code>cEgo</code> .</p>
		<p>To perform a command on something, you type its Script Name 
		followed by a dot, followed by the command name. When you type the dot, 
		the AGS Editor will automatically pop up a list of the available 
		commands:</p>
		<p align="center">
		<img border="1" src="images/tut3.gif" width="271" height="121"><br>
		<i>The script editor's auto-complete</i></p>
		<p>You then choose the appropriate command, and place any parameters in 
		brackets, like we did above with the Display command. For example:</p>
      <table border="0" id="table23">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>     
  cEgo.AddInventory(iKey);    </pre>
          </td>
        </tr>
      </table>
      <p>This will add the Key to the EGO character's inventory. If you look up
		<i>AddInventory</i> in the manual, you'll find it takes two parameters, 
		an InventoryItem * and an <i>optional int</i>. The <i>InventoryItem*</i> 
		means that you need to supply the Script Name of the inventory item; 
		this is something you can set in the script editor.<br>
		The <i>optional int</i> means that there is an extra parameter which you 
		can supply if you want to, but you don't have to. In this case it allows 
		you to specify where in the character's inventory list the new item 
		should be added, but we're not concerned with that right now.</p>
		<p>As well as all the individual character instances such as <i>cEgo</i>, 
		there is a special instance called <i>player</i>. This always 
		corresponds to the current player character, so if you just want to 
		perform a command on the player character (especially useful in games 
		where the player can control different characters) then you can use the
		<i>player</i> instance to do so.</p>
      <h3><br>
      Command Sequences</h3>
      <p dir="ltr">Suppose we want the player to be given a pink poster when
      they look at the hotspot, as well as displaying the message. Assuming we
      have an inventory item set up to be the poster with the Script Name of <i>
		iPoster </i>(see the main tutorial for how to do this), the script 
		enables us to easily make this happen.<br>
      Our final script will look like this:</p>
      <table border="0" id="table8">
        <tr>
          <td bgcolor="#99CCFF">
            <div dir="ltr">
            <pre>    
  Display(It's quite a large, ominous looking door.&quot;);    
  cEgo.AddInventory(iPoster);</pre>
          	</div>
          </td>
        </tr>
      </table>
      <p>Note that the script system is case sensitive, so writing&nbsp;for 
		example&nbsp; <code>addinventory(iposter);&nbsp;</code>
      will not work.
      <p>The script commands are processed from top to bottom in the order that
      you write them, so writing something like:</p>
      <table border="0" id="table9">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  Display(&quot;Why did the chicken cross the road?&quot;);    
  Display(&quot;Because he was bored.&quot;);    </pre>
          </td>
        </tr>
      </table>
      <p>will mean that the player gets the two messages in the order you 
		specified.
      <h3><br>
      Recap</h3>
      <p>So, did you remember these vital points:
      <ul>
        <li>Strings are surrounded by double-quote marks.</li>
        <li>Semicolon after the closing bracket on each line.</li>
        <li>
		<p dir="ltr">The script is case sensitive.</li>
		<li>To use an instance-based command, type the Script Name followed by 
		a dot, followed by the command name.</li>
		<li>The <i>player</i> instance corresponds to the current player 
		character.</li>
      </ul>
      <p><br>
      <h3>Variables</h3>
      <p>Scripts in AGS can use variables. A
      variable is an area of memory storage that contains a value, which you can
      check and change with your script.
      <p>To declare a variable, you write the variable type, followed by the
      variable name, then a semicolon. The type is either &quot;int&quot;,
      &quot;String&quot; (note the capital S) or &quot;float&quot;, and the name can be 
		anything you like - it is what you will use to refer to it later. For 
		example:</p>
      <table border="0" id="table10">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  int myCounter;    </pre>
          </td>
        </tr>
      </table>
      <p>The variable name can only contain letters A-Z, a-z and the underscore
      _ character.
      </p>
      <p>You need to declare a variable before you can use it, so that the
      compiler can spot any mistakes and knows what type of things you can store
      in it.
      </p>
      <p>Initially, your variable will have the value 0. Optionally, you can set
      the starting value within the declaration, like this:
      </p>
      <table border="0" id="table11">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  int myCounter = 5;    </pre>
          </td>
        </tr>
      </table>
      <p>which would set it to contain the value 5 initially instead.
      </p>
      <p><b>Variable Scope</b>
      <p>An unfortunate side effect of the script's attempt to emulate the 'C'
      language is variable scope. In short, this means that you need to place
      your variable definitions OUTSIDE all the event handlers,
      otherwise their values will keep getting reset.
      <p dir="ltr">So, to declare a variable for use by one of the room interaction
      scripts, you need to place the definition <b>above</b> the main function 
		body.&nbsp;&nbsp;So, it should look something like this:<br>
&nbsp;<table border="0" id="table12">
        <tr>
          <td bgcolor="#99CCFF">
            <div dir="ltr">
            <pre>// room script file
int myCounter;

<i>(other event scripts)</i>

function hDoor_Look() 
{
  Display(&quot;It's quite a large, ominous looking door.&quot;);    
}     

<i>(rest of file follows)</i></pre></div>
          </td>
        </tr>
      </table>
      <p dir="ltr">No script commands can be used outside functions (or AGS 
		wouldn't know when to run them!) - only variable declarations are allowed there.&nbsp;
      <p><b>Changing variables</b>
      <p>You can change the value of a variable very easily in the script -
      simply write the variable name, the equals sign, then the new value,
      followed by the semicolon. So:</p>
      <table border="0" id="table13">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  myCounter = 10;    </pre>
          </td>
        </tr>
      </table>
      <p>will change the value of our variable to be 10.
      <p>You can add to and subtract from a variable using the += and -=
      operators. So, to add 3 to the current value of myCounter, do the
      following:</p>
      <table border="0" id="table14">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  myCounter += 3;    </pre>
          </td>
        </tr>
      </table>
      <p><b>Checking variables</b><p>Obviously we need a way to find out what
      value our variable contains, otherwise it's useless. We do this using
      conditional statements, called <i>if</i> statements. An if statement looks
      like this:</p>
      <table border="0" id="table15">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  if (myCounter == 5)    
  {   
    myCounter = 0;
  }    </pre>
          </td>
        </tr>
      </table>
      <p>what this means is that if <i>myCounter</i> contains the value 5, then the script
      inside the { } brackets will be run (which in this case changes the value
      of <i>myCounter</i> to zero).<br>
      If <i>myCounter</i> does not equal 5, the script inside the brackets is 
		not run and execution carries on from after the } .
      <p><b>Note the double-equals in the if statement</b>. In an &quot;if&quot;
      statement, you ALWAYS use the double-equals operator, which compares the
      two values. If you used a single equals it would set the value instead,
      which will yield some strange results.
      <p>The <code>==</code> is called an operator, because it performs an
      operation on the two values. The following basic operators are available:
      <ul>
        <li>==<br>
          compares the two values, and proceeds if they are the same.</li>
        <li>!=<br>
          compares the two values, and proceeds if they are <b>not</b> the same.</li>
        <li>&lt;<br>
          compares the two values, and proceeds if the left hand value is less
          than the right hand value</li>
        <li>&gt;<br>
          compares the two values, and proceeds if the left hand value is bigger
          than the right hand value.</li>
        <li>&lt;=<br>
          proceeds if the left hand value is equal to or less than the right
          hand value</li>
        <li>&gt;=<br>
          proceeds if the left hand value is equal to or bigger than the right
          hand value</li>
      </ul>
      <p><b>Putting it into practice</b>
      <p>Now let's do something useful with our variable.
      Suppose that we want to have different messages every time the player
      looks at the hotspot. So, the first time they look it will describe it,
      then if they look again they get a different message describing something
      in more detail. Our code will want to look something like this:</p>
      <table border="0" id="table16">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>
  if (myCounter == 0) 
  {
    Display(&quot;You see a bookshelf.&quot;);
  }
  if (myCounter == 1) 
  {
    Display(&quot;Looking closer, you see a book called Hamlet.&quot;);  
  }
  if (myCounter == 2) 
  {
    Display(&quot;There is also a book called Harry Potter.&quot;);
  }
  if (myCounter == 3)
  {
    Display(&quot;There is nothing else of interest on the shelf.&quot;);  
  }
  if (myCounter &lt; 3) 
  {
    myCounter += 1;
  }</pre>
          </td>
        </tr>
      </table>
      <p><i>myCounter</i> starts off set to 0, so the first time this script is
      called it will run the first Display command, but not the others. Then,
      since 0 is less than 3, it will increase <i>myCounter</i> by 1, and since 0+1 =
      1 it now holds the value 1.<br>
      Once the player has seen all the messages (<i>myCounter</i> == 3), it no longer
      increases the value so if they click again they will keep getting the
      final message.</p>
      <p><b>Global variables made easy</b></p>
      <p>Sometimes, you may want to set a variable value that can be shared
      between a room script and your global script. There are two ways to do 
		this -- you can export the variable from the global script and then 
		import it in the script header, but that's a bit advanced for this 
		tutorial. A simpler way is to use one of the 300 GlobalInts, which use the script functions SetGlobalInt and
      GetGlobalInt to access them. See their manual descriptions for more
      information.&nbsp;&nbsp;</p>
      <h3><br>
      Functions that return a value</h3>
      <p>When reading function descriptions in the manual, you will notice that
      some of them say they return a value. For example,</p>
      <table border="0" id="table17">
        <tr>
          <td bgcolor="#FFCCCC">
            <pre>IsGamePaused ()
  Returns 1 if the game is currently paused, or 0 otherwise.  </pre>
          </td>
        </tr>
      </table>
      <p>You use these much as you would use a literal value such as
      &quot;9&quot;. For example, you can do:</p>
      <table border="0" id="table18">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  // Put the return value into our variable  
  myCounter = IsGamePaused();  

<b>(OR)</b>

  // Test the return value directly
  if (IsGamePaused() == 0) 
  {
    myCounter += 5;
  }</pre>
          </td>
        </tr>
      </table>
      <p>Be sure to remember the parenthesis ().</p>
      <h3><br>
      Common Shortcuts</h3>
      <p>The script system has a few nice shortcuts for common tasks which you
      will find yourself using regularly.</p>
      <p>Firstly, the ++ and -- operators increase and decrease the variable by
      1, respectively. So, the last part of our previous script could have been
      written:</p>
      <table border="0" id="table19">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  if (myCounter &lt; 3)   
  {     
    myCounter++;
  }</pre>
          </td>
        </tr>
      </table>
      <p>Also, the { } brackets are only needed if you are using more than one
      command inside them. Since we have only one command, the
      &quot;my_counter++;&quot; line, we can remove the { } completely and just
      be left with:</p>
      <table border="0" id="table20">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  if (myCounter &lt; 3)      
    myCounter++;</pre>
          </td>
        </tr>
      </table>
      <p dir="ltr">However, this can lead to mistakes in scripts that are hard 
		to spot, so I would advise always using brackets just to be safe.</p>
      <p>Finally, if you want to test whether a value is zero or not, you can
      just write it as follows:</p>
      <table border="0" id="table21">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  if (myCounter)      
    Display(&quot;counter is non-zero&quot;);    </pre>
          </td>
        </tr>
      </table>
      <p>which is equivalent to:</p>
      <table border="0" id="table22">
        <tr>
          <td bgcolor="#99CCFF">
            <pre>  if (myCounter != 0)      
    Display(&quot;counter is non-zero&quot;);    </pre>
          </td>
        </tr>
      </table>
      <h3><br>
      Summary</h3>
      <p>We've covered the basics, so that hopefully you can now write a script
      of your own. There are many more advanced features that the system can do,
      but this should be enough to get you started.&nbsp;</p>
      <p>When you're ready, feel free to proceed to the 
		<a href="actutor2.htm" style="font-weight: bold">Tutorial
      Chapter 2 - The Patronising Text Returns</a> which covers more advanced
      topics.</p>
      <p>Enjoy AGS!</p>
      <p><font size="2">Page created 6 June 2002; updated 19 August 2007. Copyright (c) 2002-2007
      Chris Jones.</font>        
      </td>
</tr>
</table></td>
</tr>
<tr> 
<td class="edges"><img src="images/spacer.gif" width="10" height="3"></td>
</tr>
</table>
</td>
</tr>
</table>

<!--msnavigation--></td></tr><!--msnavigation--></table></body>
</html>