//
// AGSteam: Steam API Plugin for AGS
// (C) 2011-2015 MonkeyMoto Productions, Inc.
//
// NOTICE: THIS FILE IS NOT OPEN SOURCE, AND SHOULD NEVER LEAVE THE PROPERTIES OF MONKEYMOTO PRODUCTIONS, INC.
// ("MMP") WITHOUT PRIOR EXPRESS WRITTEN PERMISSION INCLUDED AS AN ADDENDUM BELOW, ONLY BY AUTHORIZED
// PERSONNEL ACTING ON BEHALF OF MMP. IF YOU HAVE NOT BEEN SO AUTHORIZED AND HAVE OBTAINED THIS FILE, YOU ARE
// UNDER LEGAL OBLIGATION TO DELETE ALL COPIES OF IT AND ALL DERIVATIVE WORKS IMMEDIATELY. MMP AND AFFILIATED
// PARTIES SHALL NOT BE HELD LIABLE FOR ANY UNAUTHORIZED USAGE OR DISTRIBUTION OF THIS FILE, INTERNALLY OR BY
// ANY THIRD-PARTY. BY ACCESSING THIS FILE YOU ARE AGREEING TO THE TERMS AND CONDITIONS OF THIS NOTICE, AND
// ALL APPLICABLE ADDENDUMS, AND MAY BE HELD LEGALLY RESPONSIBLE FOR UNAUTHORIZED USAGE.
//
// ADDENDUM: MMP RESERVES ALL FIRST-PARTY RIGHTS TO THIS FILE AND ITS CONTENTS, INCLUDING, BUT NOT LIMITED TO
// THE RIGHT TO AUTHORIZE THIRD-PARTY USAGE OF THIS FILE, AND THE RIGHT TO REVOKE SUCH AUTHORIZATION FROM ANY
// THIRD-PARTY. AUTHORIZATION MAY BE GRANTED OR REVOKED AT ANY TIME AND FOR ANY REASON BY MMP. UPON NOTICE OF
// REVOCATION OF RIGHTS, THIRD-PARTIES MUST COMPLY IMMEDIATELY WITH THE REVISED TERMS GIVEN BY MMP. ANY
// ADDENDUMS OR CHANGES TO THIS ADDENDUM OR THE PRIOR NOTICE SHALL BE HELD NULL AND VOID BY MMP, PURSUANT TO
// THE RESTRICTIONS STATED WITHIN.
//
// ADDENDUM: IN AGREEMENT WITH WADJET EYE GAMES ("WEG"), THE FOLLOWING PRIVILEGES ARE GRANTED, BEGINNING ON
// 16 FEBRUARY 2013. AUTHORIZED PERSONNEL OF WEG ARE HEREBY AUTHORIZED BY MONKEYMOTO PRODUCTIONS, INC. TO
// ACCESS AND MODIFY THE CONTENTS OF THIS FILE, PURSUANT TO THE PRIOR RESTRICTIONS, AND THE TERMS AND
// CONDITIONS OF EXISTING NON-DISCLOSURE AGREEMENTS BETWEEN VALVE CORPORATION ("VALVE") AND MMP, AND VALVE AND
// WEG. LIMITED AUTHORIZATION IS ALSO GRANTED TO AUTHORIZED WEG PERSONNEL TO REDISTRIBUTE THIS FILE, PURSUANT
// TO THE FOLLOWING RESTRICTIONS:
//
//     THE ABOVE NOTICE AND ALL EXISTING ADDENDUMS MUST REMAIN UNCHANGED AT THE BEGINNING OF THIS C++ FILE.
//
//     WEG ACCEPTS FULL RESPONSIBILITY AND LIABILITY FOR ANY USAGE OF THIS FILE BY THIRD-PARTIES IT
//     AUTHORIZES, PURSUANT TO THEIR OWN TERMS AND RESTRICTIONS, WHICH MUST NOT PLACE ANY FURTHER LIABILITY
//     UPON MMP.
//
// ADDENDUM: ALL PARTIES ARE GRANTED NON-EXCLUSIVE LICENSE TO REDISTRIBUTE THE COMPILED FORM OF THIS C++ FILE
// FOR THE PURPOSES OF STATIC OR DYNAMIC CODE LINKING, SUCH AS IN THE FORM OF A WINDOWS DYNAMIC-LINK LIBRARY
// ("DLL") FILE. THIS ADDENDUM DOES NOT APPLY TO THE NON-COMPILED SOURCE OF THIS C++ FILE.
//
// ADDENDUM: ADDITIONAL RESTRICTIONS AND DEFINITION OF TERMS MAY BE INCLUDED IN A SEPARATE FILE NAMED
// "LICENSE" ("THE LICENSE FILE"), WITH NO TRAILING FILE EXTENSION. THE LICENSE FILE WILL BE WRITTEN IN PLAIN-
// TEXT, IN THE ENGLISH LANGUAGE, WITH A UTF-8 CHARACTER ENCODING. THE LICENSE FILE AND THIS ADDENDUM MAY BE
// AMENDED AS NECESSARY BY ANY AUTHORIZED PERSONS, WHILE UNAUTHORIZED CHANGES WILL BE NULL AND VOID.
//
// ADDENDUM: BEGINNING ON 2 APRIL 2014 THE FOLLOWING RESTRICTIONS SHALL BE ENFORCED UPON ALL AUTHORIZED THIRD-
// PARTY USAGE, INCLUDING, BUT NOT LIMITED TO SUBLICENSING OR REDISTRIBUTION OF THIS FILE. THESE RESTRICTIONS
// SUPERCEDE AND NULLIFY ALL PRIOR THIRD-PARTY AUTHORIZATIONS GRANTED BY MONKEYMOTO PRODUCTIONS, INC.:
//
//     THE ABOVE NOTICE AND ALL EXISTING ADDENDUMS MUST REMAIN UNCHANGED AT THE BEGINNING OF THIS C++ FILE AND
//     AT THE BEGINNING OF THE LICENSE FILE.
//
//     LIMITED AUTHORIZATION IS GRANTED TO AUTHORIZED THIRD-PARTIES TO REDISTRIBUTE OR SUBLICENSE THIS FILE,
//     PURSUANT TO ALL TERMS INCLUDED HEREIN. ADDITIONAL LICENSES MUST NOT PERMIT LESS RESTRICTIVE USAGE OF
//     THIS FILE THAN ORIGINALLY AUTHORIZED.
//
//     NO FURTHER LIABILITY MUST BE PLACED UPON MONKEYMOTO PRODUCTIONS, INC. BY THE AUTHORIZED THIRD-PARTY,
//     INCLUDING, BUT NOT LIMITED TO, ANY LIABILITY ARISING FROM THIRD-PARTIES NOT DIRECTLY AUTHORIZED BY
//     MONKEYMOTO PRODUCTIONS, INC.
//
//     THE AUTHORIZED THIRD-PARTY ACCEPTS FULL RESPONSIBILITY AND LIABILITY FOR ANY USAGE OF THIS FILE BY
//     THE AUTHORIZED THIRD-PARTY OR OTHER THIRD-PARTIES IT AUTHORIZES, PURSUANT TO THEIR OWN TERMS AND
//     RESTRICTIONS.
//
//     THE AUTHORIZED THIRD-PARTY IS SOLELY RESPONSIBLE FOR VALIDATING THE RIGHTS OF ANY OTHER THIRD-PARTIES
//     THEY WISH TO GRANT ACCESS TO THIS FILE. THIS INCLUDES, BUT IS NOT LIMITED TO, ENSURING THAT THE OTHER
//     PARTY HAS A CURRENT AND VALID NON-DISCLOSURE AGREEMENT WITH VALVE CORPORATION IN ORDER TO GAIN ACCESS
//     TO THE STEAMWORKS SDK AND API.
//
//     IF AT ANY TIME OR FOR ANY REASON AN AUTHORIZED THIRD-PARTY BECOMES INELIGIBLE TO ACCESS THE
//     STEAMWORKS SDK OR API, SUCH AS, BUT NOT LIMITED TO DISSOLUTION OF A NON-DISCLOSURE AGREEMENT WITH
//     VALVE CORPORATION, THE PARTY MUST NOTIFY MONKEYMOTO PRODUCTIONS, INC. WITHIN TWENTY-FOUR HOURS AND
//     IMMEDIATELY DISCONTINUE ALL USAGE OF THIS FILE. AT SUCH TIME AS THE THIRD-PARTY THUS BECOMES SO
//     INELIGIBLE, ALL RIGHTS AND PRIVILEGES GRANTED TO THE PARTY BY MONKEYMOTO PRODUCTIONS, INC. REGARDING
//     THIS FILE BECOME NULL AND VOID.
//
//     ALL OTHER APPLICABLE RESTRICTIONS APPLY. THIS INCLUDES BUT IS NOT LIMITED TO THE TERMS AND CONDITIONS
//     OF NON-DISCLOSURE AGREEMENTS BETWEEN VALVE CORPORATION AND THE AUTHORIZED THIRD-PARTY, AND BETWEEN
//     VALVE CORPORATION AND MONKEYMOTO PRODUCTIONS, INC., THE RESTRICTIONS DETAILED ABOVE, AND LOCAL AND
//     INTERNATIONAL LAWS. MONKEYMOTO PRODUCTIONS, INC. RESERVES ALL RIGHT TO PURSUIT OF LEGAL RECOURSE IN
//     THE EVENT THAT THESE RESTRICTIONS ARE BROKEN BY ANY THIRD-PARTY.
//
// ADDENDUM: IN AGREEMENT WITH WADJET EYE GAMES, THE FOLLOWING PRIVILEGES ARE GRANTED, BEGINNING ON 2 APRIL
// 2014. AUTHORIZED PERSONNEL OF WADJET EYE GAMES ARE HEREBY AUTHORIZED BY MONKEYMOTO PRODUCTIONS, INC. TO
// ACCESS AND MODIFY THIS FILE, PURSUANT TO THE TERMS AND RESTRICTIONS DETAILED ABOVE.
//
// ADDENDUM: IN AGREEMENT WITH INFAMOUS QUESTS, LLC, THE FOLLOWING PRIVILEGES ARE GRANTED, BEGINNING ON 2
// APRIL 2014. AUTHORIZED PERSONNEL OF INFAMOUS QUESTS, LLC ARE HEREBY AUTHORIZED BY MONKEYMOTO PRODUCTIONS,
// INC. TO ACCESS AND MODIFY THIS FILE, PURSUANT TO THE TERMS AND RESTRICTIONS DETAILED ABOVE.
//
// ADDENDUM: IN AGREEMENT WITH PHOENIX ONLINE STUDIOS LLC, THE FOLLOWING PRIVILEGES ARE GRANTED, BEGINNING ON
// 2 APRIL 2014. AUTHORIZED PERSONNEL OF PHOENIX ONLINE STUDIOS LLC ARE HEREBY AUTHORIZED BY MONKEYMOTO
// PRODUCTIONS, INC. TO ACCESS AND MODIFY THIS FILE, PURSUANT TO THE TERMS AND RESTRICTIONS DETAILED ABOVE.
//
// ADDENDUM: BEGINNING ON 27 MAY 2015, THE RESTRICTIONS DETAILING THIRD-PARTY USAGE, LAST MODIFIED ON 2 APRIL
// 2014, ARE HEREBY MODIFIED IN THE FOLLOWING WAYS:
//
//     THE FOURTH PARAGRAPH OF RESTRICTIONS, BEGINNING, "THE AUTHORIZED THIRD-PARTY ACCEPTS FULL RESPONSIBILITY"
//     IS REPLACED IN FULL WITH THE FOLLOWING PARAGRAPH.
//
//     THE AUTHORIZED THIRD-PARTY ACCEPTS FULL RESPONSIBILITY AND LIABILITY FOR ANY USAGE OF THIS FILE BY
//     THE AUTHORIZED THIRD-PARTY OR OTHER THIRD-PARTIES IT AUTHORIZES, PURSUANT TO THE TERMS AND
//     RESTRICTIONS OF THE AUTHORIZED THIRD-PARTY, WHICH MAY NOT BE LESS RESTRICTIVE THAN ORIGINALLY
//     AUTHORIZED BY MONKEYMOTO PRODUCTIONS, INC.
//
// ADDENDUM: IN AGREEMENT WITH CLIFFTOP GAMES, THE FOLLOWING PRIVILEGES ARE GRANTED, BEGINNING ON 27
// SEPTEMBER 2015. AUTHORIZED PERSONNEL OF CLIFFTOP GAMES ARE HEREBY AUTHORIZED BY MONKEYMOTO PRODUCTIONS,
// INC. TO ACCESS AND MODIFY THIS FILE, PURSUANT TO THE TERMS AND RESTRICTIONS DETAILED ABOVE.
//
#include "Stub/IAGSteam.h"
#include "SteamStats.h"

namespace AGSteam
{
namespace Plugin
{

SteamStat::SteamStat() : AppID(0), Initialized(false), CallbackUserStatsReceived(this, &SteamStat::OnUserStatsReceived),
                         CallbackUserStatsStored(this, &SteamStat::OnUserStatsStored),
                         CallResultGlobalStatsReceived()
{
	if (!AGSteam_IsSteamInitialized()) return;
	AppID = SteamUtils()->GetAppID();
	RequestStats();
    CallResultGlobalStatsReceived.Set((SteamUserStats() == NULL ? 0 : SteamUserStats()->RequestGlobalStats(0)), this, &SteamStat::OnGlobalStatsReceived);
}

SteamStat::~SteamStat()
{
}

bool SteamStat::RequestStats()
{
	if ((!AGSteam_IsSteamInitialized()) || (SteamUserStats() == NULL) || (SteamUser() == NULL)) return false; // Steam not loaded
	if (!SteamUser()->BLoggedOn()) return false; // not logged on
	return SteamUserStats()->RequestCurrentStats();
}

bool SteamStat::StoreStats()
{
	if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return false;
	return SteamUserStats()->StoreStats();
}

void SteamStat::OnUserStatsReceived(UserStatsReceived_t *pCallback)
{
	if (pCallback->m_nGameID != AppID) return; // callback is for another game's stats, ignore it
	if (pCallback->m_eResult == k_EResultOK) Initialized = true;
}

void SteamStat::OnGlobalStatsReceived(GlobalStatsReceived_t *pCallResult, bool IOFailure)
{
    if (pCallResult->m_nGameID != AppID) return;
}

void SteamStat::OnUserStatsStored(UserStatsStored_t *pCallback)
{
	if (pCallback->m_nGameID != AppID) return; // callback is for another game's stats, ignore them
    if ((pCallback->m_eResult != k_EResultOK) && (pCallback->m_eResult == k_EResultInvalidParam))
	{
		// One or more stats we set broke a constraint. They've been reverted,
		// and we should re-interate the values now to keep in sync.
		// Fake a callback here so that we reload the values
		UserStatsReceived_t callback;
		callback.m_eResult = k_EResultOK;
		callback.m_nGameID = AppID;
		OnUserStatsReceived(&callback);
	}
}

int SteamStat::GetIntStat(char const *name)
{
  if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return 0;
  int32 i = 0;
  SteamUserStats()->GetStat(name, &i);
  return static_cast<int>(i);
}

int SteamStat::GetGlobalIntStat(char const *name)
{
  if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return 0;
  int64 i = 0;
  SteamUserStats()->GetGlobalStat(name, &i);
  return static_cast<int>(i);
}

float SteamStat::GetFloatStat(char const *name)
{
    if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return 0.0f;
    float f = 0.0f;
	SteamUserStats()->GetStat(name, &f);
	return f;
}

float SteamStat::GetGlobalFloatStat(char const *name)
{
  if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return 0;
  double d = 0.0f;
  SteamUserStats()->GetGlobalStat(name, &d);
  return static_cast<float>(d);
}

float SteamStat::GetAvgRateStat(char const *name)
{
  return GetFloatStat(name); // average rates are calculated as float values
}

bool SteamStat::SetIntStat(char const *name, int value)
{
    if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return false;
    SteamUserStats()->SetStat(name, static_cast<int32>(value));
    int result = StoreStats();
    SteamAPI_RunCallbacks();
	return (result != 0);
}

bool SteamStat::SetFloatStat(char const *name, float value)
{
  if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return false;
  SteamUserStats()->SetStat(name, value);
	return StoreStats();
}

bool SteamStat::UpdateAvgRateStat(char const *name, float numerator, float denominator)
{
  if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return false;
  SteamUserStats()->UpdateAvgRateStat(name, numerator, denominator);
  GetFloatStat(name); // the API examples always call this for average rates, not sure if this is a necessary step here
	return StoreStats();
}

void SteamStat::ResetStats()
{
    if ((!AGSteam_IsSteamInitialized()) || (!Initialized)) return;
    SteamUserStats()->ResetAllStats(false);
}

} // namespace Plugin
} // namespace AGSteam
